import { Request, Response, NextFunction } from 'express';
export declare class AdminController {
    createAdmin(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getAllAdmins(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getAdminById(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateAdmin(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    deleteAdmin(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateAdminStatus(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getSystemStats(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getSystemHealth(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getSystemSettings(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateSystemSettings(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getAuditLogs(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getAllAnnouncements(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    createAnnouncement(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateAnnouncement(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    deleteAnnouncement(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    exportData(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    importData(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    backupDatabase(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    restoreDatabase(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getDashboard(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getAnalytics(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getUsers(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getUser(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateUserStatus(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateUserLimits(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    deleteUser(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getMerchants(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getMerchant(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateMerchantStatus(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateMerchantLimits(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getTransactions(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getTransaction(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    refundTransaction(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateTransactionStatus(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getCards(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getCard(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    updateCardStatus(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    blockCard(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    unblockCard(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getKYCRequests(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getKYCRequest(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    approveKYC(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    rejectKYC(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    getAuditLog(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    enableMaintenance(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    disableMaintenance(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
    clearCache(_req: Request, res: Response, next: NextFunction): Promise<void | Response>;
}
export declare const adminController: AdminController;
//# sourceMappingURL=admin.controller.d.ts.map